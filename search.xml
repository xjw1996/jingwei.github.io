<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于renren-fast开发，负载均衡缺少pom文件大坑</title>
      <link href="2021/01/06/renren-fast/"/>
      <url>2021/01/06/renren-fast/</url>
      
        <content type="html"><![CDATA[<p>@通过网关连接renren-fast时候报的错</p><h1 id="Error-creating-bean-with-name-‘ribbonLoadBalancingHttpClient’"><a href="#Error-creating-bean-with-name-‘ribbonLoadBalancingHttpClient’" class="headerlink" title="Error creating bean with name ‘ribbonLoadBalancingHttpClient’"></a>Error creating bean with name ‘ribbonLoadBalancingHttpClient’</h1><p>通过spring gateway 网关把请求分配给renren-fast的时候出现了以下错误。</p><pre class="line-numbers language-none"><code class="language-none">2021-01-06 22:47:02.793 ERROR 14024 --- [ctor-http-nio-2] a.w.r.e.AbstractErrorWebExceptionHandler : [b41c453c] 500 Server Error for HTTP GET "/api/captcha.jpg?uuid=197cc4fb-3695-43cd-8293-8cf4dc31b91f"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>couse by 1</p><pre class="line-numbers language-none"><code class="language-none">Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'ribbonLoadBalancer' defined in org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration: Unsatisfied dependency expressed through method 'ribbonLoadBalancer' parameter 2; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ribbonServerListFilter' defined in org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.netflix.loadbalancer.ServerListFilter]: Factory method 'ribbonServerListFilter' threw exception; nested exception is java.lang.NoClassDefFoundError: com/netflix/servo/monitor/Monitors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>couse by 2</p><pre class="line-numbers language-none"><code class="language-none">Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'ribbonServerListFilter' defined in org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.netflix.loadbalancer.ServerListFilter]: Factory method 'ribbonServerListFilter' threw exception; nested exception is java.lang.NoClassDefFoundError: com/netflix/servo/monitor/Monitors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210106222317765.png" alt="在这里插入图片描述">根本没有这个东西</p><p>所以参考<br>链接: <a href="https://www.cnblogs.com/ye-feng-yu/p/11106006.html">link</a>.的博客gateway ribbon 负载均衡这块，发现自己的pom文件里没有如下依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;    &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;    &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个加上，重新reload Maven 重跑gateway<br><img src="https://img-blog.csdnimg.cn/2021010700364017.png" alt="在这里插入图片描述"><br>原先获取图片的地方由500 变成了 200  成功了 </p>]]></content>
      
      
      <categories>
          
          <category> renren-fast </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL编码问题的坑</title>
      <link href="2020/12/06/mysql-bian-ma-de-keng/"/>
      <url>2020/12/06/mysql-bian-ma-de-keng/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL编码问题的坑"><a href="#MySQL编码问题的坑" class="headerlink" title="MySQL编码问题的坑"></a>MySQL编码问题的坑</h1><ul><li>缘由通过前端页码往后端post请求数据更改，中文出现“？？？”的问题<img src="https://img-blog.csdnimg.cn/20210123192905122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></li><li>进入docker MySQL的交互容器内</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker <span class="token builtin class-name">exec</span> -it mysql /bin/bash$ mysql -u root -p<span class="token comment"># 查看编码方式</span>$ show variables like <span class="token string">'character\_set\_%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://img-blog.csdnimg.cn/20210123194719226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/2021012401044694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="service mysqld restart"></p><p>储存的中文数据什么也显示不出来，大部分都为latin1，猜想可能这块有问题。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ SET character_set_client <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_connection <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_database <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_results <span class="token operator">=</span> utf8<span class="token punctuation">;</span>$ SET character_set_server <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后重启MySQL</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后重新查看MySQL的编码形式，然而并没有卵用，MySQL依旧是打不死的小强，无论你你怎么能他依然latin1屹立不倒</p><ul><li><strong>所以要找到MySQL的my.cof配置文件的位置，对配置文件进行改动</strong><br>如下面代码所示，我认为这个是中文不出现乱码的最好的配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token assign-left variable">init_connect</span><span class="token operator">=</span>’SET collation_connection <span class="token operator">=</span> utf8_unicode_ci’<span class="token assign-left variable">init_connect</span><span class="token operator">=</span>’SET NAMES utf8’character-set-server<span class="token operator">=</span>utf8collation-server<span class="token operator">=</span>utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我又重启了MySQL，看了一遍编码方式我的天latin1纹丝不动我都要吐血了。</p><p>查阅了很多资料都是废话连篇，千篇一律。</p><p>所以思考是不是配置文件放错地方，导致MySQL根本没有察觉到配置文件的存在，在这里我要说一下我的配置文件原先设置的位置是 etc/mysql/my.conf<br>一般配置文件是直接放在etc下面的，所以etc下vim了个my.conf，把utf8的配置粘贴了进去，中心启动MySQL服务器，<br><img src="https://img-blog.csdnimg.cn/20210124024319195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>清一色utf8，嘎嘎舒服<br>所以说MySQL的my.cnf这个配置文件放的地方<br>my.cnf配置文件位置<font color="#dd0000"><strong>超级重要</strong></font><br><br>my.cnf配置文件位置<font color="#dd0000"><strong>超级重要</strong></font><br><br>my.cnf配置文件位置<font color="#dd0000"><strong>超级重要</strong></font><br><br>重要的事说三遍</p><p><img src="https://img-blog.csdnimg.cn/20210124024434599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>前端页码发送post的请求，刷新返回来的数据也显示中文了哈哈。。。。</p><h2 id="一点应该知道的基础知识"><a href="#一点应该知道的基础知识" class="headerlink" title="一点应该知道的基础知识"></a>一点应该知道的基础知识</h2><ul><li>小插曲 如果想查看MySQL的配置文件要到/etc/mysql/my.cnf的地方 cat一下可以看到配置信息，<strong>MySQL配置文件在Windows下叫my.ini，在MySQL的安装根目录下；在Linux下叫my.cnf，该文件位于/etc/my.cnf。</strong></li><li>我们在创建基础容器之后，进入容器，进行编辑配置文件的时候，需要使用vim或者vi命令，但是会出现：这是因为vim没有安装。</li></ul><p>安装vim就好啦</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">apt-get</span> update$ <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="MySQL的基本操作方法"><a href="#MySQL的基本操作方法" class="headerlink" title="MySQL的基本操作方法"></a>MySQL的基本操作方法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mysql -u root -p$ SHOW DATABASES<span class="token punctuation">;</span>$ USE 数据库名称$ show tables<span class="token punctuation">;</span>$ <span class="token keyword">select</span> * from 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装 NVIDIA Driver，CUDA, cuDNN</title>
      <link href="2020/04/06/ubuntu-an-zhuang/"/>
      <url>2020/04/06/ubuntu-an-zhuang/</url>
      
        <content type="html"><![CDATA[<ul><li>用USB引导盘装好系统以后，选英语语言和英语键盘并且加入字体库命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> /usr/lib/locale$ <span class="token function">sudo</span> locale-gen - -purge - -no-archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>下载 NVIDIA  Driver</li></ol><table><thead><tr><th>CUDA Toolkit</th><th>Linux x86_64 Driver Version</th></tr></thead><tbody><tr><td>CUDA 9.2(9.2.88)</td><td>&gt;=396.26</td></tr><tr><td>CUDA 9.2(9.2.148 Update 1)</td><td>&gt;=396.37 &amp;&amp; &lt;410.48</td></tr><tr><td>CUDA 10.1</td><td>&gt;=418.39</td></tr><tr><td>CUDA 10.2.89</td><td>&gt;=440.33</td></tr><tr><td>CUDA 11.0.1 RC</td><td>&gt;=450.36.06</td></tr><tr><td>CUDA 11.0.2 GA</td><td>&gt;=450.51.05</td></tr><tr><td>CUDA 11.0.3 Update 1</td><td>&gt;=450.51.06</td></tr></tbody></table><ol start="2"><li>NVIDIA  Driver 安装</li></ol><p>在google搜索nvidia drivers找到官网，下载驱动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> purge nvidia*$ <span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential gcc-multilib dkms$ <span class="token function">sudo</span> <span class="token function">touch</span> /etc/modprobe.d/blacklist-nouveau.conf$ <span class="token function">sudo</span> gedit /etc/modprobe.d/blacklist-nouveau.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入<br>blacklist nouveau<br>options nouveau modeset=0<br>进入/etc/default 找到grub文件，在此⻚打开terminal，输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> gedit grub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 GRUB-CMDLINE-LINUX-DEFAULT=“quiet splash“处的splash 后加nomodeset</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> update-initramfs -u $ <span class="token function">sudo</span> update-grub2$ <span class="token builtin class-name">cd</span> ~$ <span class="token builtin class-name">cd</span> /Downloads$ <span class="token function">ls</span> -la$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x NVIDIA-Linux-x86_64-450.57.run $ <span class="token function">sudo</span> ./NVIDIA-Linux-x86_64-450.57.run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>安装CUDA</li></ol><p>去官网找到相应版本，installer Type选deb(local)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">nano</span> /etc/profile.d/cuda.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/cuda/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDADIR</span><span class="token operator">=</span>/usr/local/cuda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/profile.d/cuda.sh $ <span class="token function">sudo</span> <span class="token function">nano</span> /etc/ld.so.conf.d/cuda.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/cuda/lib64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ldconfig $ <span class="token function">reboot</span>$ nvcc - -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>cuDNN 的安装<br>官方网站下载cudnn</li></ol><ul><li>cuDNN Library for Linux (x86)</li><li>cuDNN Runtime Library for Ubuntu 18.04</li><li>cuDNN Developer Library for Ubuntu 18.04</li><li>cuDNN Code Samples and User Guide for Ubuntu 18.04</li><li>如果双击后在软件仓库安装时出现无法俺从来而情况，可以通过命令安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg -i 要解压的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.1 将文件解压并复制到CUDA中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> -xzvf cudnn-ooxx.tgz //解压文件，也可手动解压$ <span class="token function">sudo</span> <span class="token function">cp</span> cuda/include/cudnn.h /usr/local/cuda/include$ <span class="token function">sudo</span> <span class="token function">cp</span> cuda/lib64/libcudnn* /usr/local/cuda/lib64$ <span class="token function">sudo</span> <span class="token function">chmod</span> a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.2 检验cuDNN是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> -r /usr/src/cudnn_samples_v7/mnistCUDNN <span class="token environment constant">$HOME</span>$ <span class="token builtin class-name">cd</span> <span class="token environment constant">$HOME</span>/cudnn_samples_v7/mnistCUDNN $ <span class="token function">make</span> clean <span class="token operator">&amp;&amp;</span> <span class="token function">make</span>$ ./mnistCUDNN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>出现了Test passed！ 则安装成功</p><p>如果命令copy过去没有编译成功 可以手动复制过去</p><p><img src="https://img-blog.csdnimg.cn/20210120045448638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20210120045501656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker里面导入MySQL</title>
      <link href="2019/12/06/docker-mysql/"/>
      <url>2019/12/06/docker-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-hub"><a href="#docker-hub" class="headerlink" title="docker hub"></a>docker hub</h1><ul><li><p>下载MySQL镜像</p><p><code>sudo docker pull mysql:5.7</code></p></li><li><p>检查下载好的镜像</p><p><code>sudo docker images</code></p></li><li><p>切换root的用户</p><p><code>su root</code></p></li><li><p>启动容器</p><p>docker run -p 3306:3306 –name mysql \</p></li></ul><blockquote><p>-v /mydata/mysql/log:/var/log/mysql <br>-v /mydata/mysql/data:/var/lib/mysql <br>-v /mydata/mysql/conf:/etc/mysql <br>-e MYSQL_ROOT_PASSWORD=root <br>-d mysql:5.7</p></blockquote><pre><code>-p 3306:3306为端口映射</code></pre><p>-v 是目录挂载 具体意思是在本体linux下的/mydata/mysql/log  ：冒号就是与容器内部的/var/log/mysql进行挂载，直白的说容器内部log文件的记录 会直接反应到linux指定目录下，容器内不的日志，linux在外面也能够看到</p><p><img src="https://img-blog.csdnimg.cn/20210120010836980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><p>如上图所示，MySQL容器挂载的各个log，数据，配置文件dg在外面root linux里面也是可以访问到的，容器外部对挂载文件直接修改，是可以同步到容器</p><ul><li><p>查看docker运行中的容器</p><p><code>docker ps</code></p></li><li><p>进入MySQL容器内部</p><ul><li><code>docker exec -it docker容器的前三位id\或者容器的名字 /bin/bash</code></li></ul><p><img src="https://img-blog.csdnimg.cn/2021012001085931.png"></p><ul><li>就会发现我们进入容器内部的环境当中，因为每一个容器都是一个小型的linux系统，如上图为哦们已经进入到MySQL容器的内部</li></ul><p><img src="https://img-blog.csdnimg.cn/20210120010917607.png"></p></li></ul><ul><li>查看目录结构会发现，他就是一个完整的一个linux的目录结构</li></ul><p><img src="https://img-blog.csdnimg.cn/20210120011025911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><ul><li><p>查看MySQL装在了那个位置</p><p><code>whereis mysql</code><br><img src="https://img-blog.csdnimg.cn/20210120011051134.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-uuUv48u2-1611076069706)(C:\Users\jinue\AppData\Roaming\Typora\typora-user-images\image-20201206041528226.png)]"></p></li><li><p>下图是docker容器文件挂载与端口映射<br><img src="https://img-blog.csdnimg.cn/20210120011126996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p></li></ul><p>访问linux的3306接口也就能够访问到MySQL容器的3306的端口</p><p>cd conf      vi my.cnf</p><ul><li>复制下面配置文件</li></ul><p>[client]</p><p>default-character-set=utf8</p><p>[mysql]</p><p>default-character-set=utf8</p><p>[mysqld]</p><p>init_connect=’SET collation_connection = utf8_unicode_ci’</p><p>init_connect=’SET NAMES utf8’</p><p>character-set-server=utf8</p><p>collation-server=utf8_unicode_ci</p><p>skip-character-set-client-handshake</p><p>skip-name-resolve</p><p><img src="https://img-blog.csdnimg.cn/20210120011245615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTI0MzQ4Ng==,size_16,color_FFFFFF,t_70"></p><ul><li><p>docker 重启mysql</p><p><code>docker restart mysql</code></p></li></ul><ul><li><p>进入交互模式</p><p><code>docker exec -it mysql /bin/bash</code></p><p>查看linux上配置的文件是否同步到位</p><ul><li>进入MySQL内部查看配置</li><li><code>mysql -u root -p</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
